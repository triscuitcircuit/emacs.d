
(use-package org
;    :pin manual
    ; :load-path ("lisp/org-mode/lisp" "lisp/org-mode/lisp/contrib/lisp")
    :bind
    ("C-a" . org-beginning-of-line)
    ("C-e" . org-end-of-line)
    ("C-k" . org-kill-line)
    :custom
          (org-log-done t)
        (org-log-done t)
    ;    (use-package org-indent
    ;      :ensure nil
    ;      :diminish)
          (org-use-speed-commands (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
        (org-confirm-babel-evaluate nil)
        (prettify-symbols-unprettify-at-point 'right-edge)
          (org-src-fontify-natively t)
         (org-src-tab-acts-natively t)
         (org-tags-column 0)
           (org-hide-emphasis-markers t)
          (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))
    :custom-face
          (fixed-pitch ((t (:family "Inconsolata" :height 180))))
    :hook
          (org-babel-after-execute . org-redisplay-inline-images)
          (focus-out-hook . org-save-all-org-buffers)
          ;; from [zz], from elsewhere:
          (org-mode . (lambda ()
    	      "Beautify Org Checkbox Symbol"
    	      (push '("[ ]" . "‚òê" ) prettify-symbols-alist)
                  (push '("[X]" . "‚òë" ) prettify-symbols-alist)
                  (push '("[-]" . "‚ä°" ) prettify-symbols-alist)
                  (prettify-symbols-mode)))
    
          (org-mode . visual-line-mode)
    ;      (org-mode . variable-pitch-mode)
    :config
          (eval-after-load 'face-remap '(diminish 'buffer-face-mode))
          (eval-after-load 'simple '(diminish 'visual-line-mode)))




;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-bullets :after org :hook (org-mode . (lambda () (org-bullets-mode 1)))) #+END_SRC *** Set up variable-pitch font: Used to use ~variable-pitch-mode~, but it looks like ~org-variable-pitch-minor-mode~ is better, since it does things to allow keeping lists aligned, etc., that VPM didn't do. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-variable-pitch :after org :hook (org-mode . (lambda () (org-variable-pitch-minor-mode 1)))) ; (add-hook 'org-mode-hook 'variable-pitch-mode) #+END_SRC *** Try to get indentations right (again) when using variable pitch font, which are now (<2019-01-28 Mon>) not working correctly. Found \[\[https:/emacs.stackexchange.com/questions/26864/variable-pitch-face-breaking-indentation-in-org-mode\]\[this\]\] from stuart-hickinbottom \[sh\] on StackExchange: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'after-init-hook (lambda () (require 'org-indent) ; for org-indent face (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch)))) #+END_SRC *** Give us some nice-looking margins \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'org-mode-hook '(lambda () (setq header-line-format " ") (setq left-margin-width 2) (setq right-margin-width 2) (set-window-buffer nil (current-buffer)))) #+END_SRC *** Some other stuff from \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-startup-indented t) (customize-set-variable 'org-ellipsis "...") ;; folding symbol (customize-set-variable 'org-pretty-entities t) (customize-set-variable 'org-hide-emphasis-markers t) (customize-set-variable 'org-agenda-block-separator "") (customize-set-variable 'org-fontify-whole-heading-line t) (customize-set-variable 'org-fontify-done-headline t) (customize-set-variable 'org-fontify-quote-and-verse-blocks t) #+END_SRC *** - Set up fixed-pitch font: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces (fixed-pitch ((t (:family "Inconsolata" :height 180)))) #+END_SRC *** Associating faces with Org Mode elements Leave this to the ~customizations.el~ file, since they may change frequently. *** Turn on ~visual-line-mode~ and ~variable-pitch-mode~ by default: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks (org-mode . visual-line-mode) ; (org-mode . variable-pitch-mode) #+END_SRC *** \[zz\] Get rid of mode line indicators for the prior two modes: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config (eval-after-load 'face-remap '(diminish 'buffer-face-mode)) (eval-after-load 'simple '(diminish 'visual-line-mode)) #+END_SRC *** Consider using ~toc-org~, which puts a table of contents at the top of the Org file; this is described in \[zz\]'s init file. However, he/she says it breaks HTML export, so I'm not adding it here. *** Disguise =#+BEGIN_/#+END_= markers From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\] -- note that we can't hide =begin_src/end_src= pairs due to all the other crap that might be on the lines: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Use ~org-bullets~ and turn it on by default::1]]
     (use-package org-bullets
       :after org
       :hook (org-mode . (lambda () (org-bullets-mode 1))))
;; Use ~org-bullets~ and turn it on by default::1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-variable-pitch :after org :hook (org-mode . (lambda () (org-variable-pitch-minor-mode 1)))) ; (add-hook 'org-mode-hook 'variable-pitch-mode) #+END_SRC *** Try to get indentations right (again) when using variable pitch font, which are now (<2019-01-28 Mon>) not working correctly. Found \[\[https:/emacs.stackexchange.com/questions/26864/variable-pitch-face-breaking-indentation-in-org-mode\]\[this\]\] from stuart-hickinbottom \[sh\] on StackExchange: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'after-init-hook (lambda () (require 'org-indent) ; for org-indent face (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch)))) #+END_SRC *** Give us some nice-looking margins \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'org-mode-hook '(lambda () (setq header-line-format " ") (setq left-margin-width 2) (setq right-margin-width 2) (set-window-buffer nil (current-buffer)))) #+END_SRC *** Some other stuff from \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-startup-indented t) (customize-set-variable 'org-ellipsis "...") ;; folding symbol (customize-set-variable 'org-pretty-entities t) (customize-set-variable 'org-hide-emphasis-markers t) (customize-set-variable 'org-agenda-block-separator "") (customize-set-variable 'org-fontify-whole-heading-line t) (customize-set-variable 'org-fontify-done-headline t) (customize-set-variable 'org-fontify-quote-and-verse-blocks t) #+END_SRC *** - Set up fixed-pitch font: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces (fixed-pitch ((t (:family "Inconsolata" :height 180)))) #+END_SRC *** Associating faces with Org Mode elements Leave this to the ~customizations.el~ file, since they may change frequently. *** Turn on ~visual-line-mode~ and ~variable-pitch-mode~ by default: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks (org-mode . visual-line-mode) ; (org-mode . variable-pitch-mode) #+END_SRC *** \[zz\] Get rid of mode line indicators for the prior two modes: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config (eval-after-load 'face-remap '(diminish 'buffer-face-mode)) (eval-after-load 'simple '(diminish 'visual-line-mode)) #+END_SRC *** Consider using ~toc-org~, which puts a table of contents at the top of the Org file; this is described in \[zz\]'s init file. However, he/she says it breaks HTML export, so I'm not adding it here. *** Disguise =#+BEGIN_/#+END_= markers From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\] -- note that we can't hide =begin_src/end_src= pairs due to all the other crap that might be on the lines: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Set up variable-pitch font::1]]
(use-package org-variable-pitch
     :after org
     :hook (org-mode . (lambda () (org-variable-pitch-minor-mode 1))))
;   (add-hook 'org-mode-hook 'variable-pitch-mode)
;; Set up variable-pitch font::1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'after-init-hook (lambda () (require 'org-indent) ; for org-indent face (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch)))) #+END_SRC *** Give us some nice-looking margins \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'org-mode-hook '(lambda () (setq header-line-format " ") (setq left-margin-width 2) (setq right-margin-width 2) (set-window-buffer nil (current-buffer)))) #+END_SRC *** Some other stuff from \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-startup-indented t) (customize-set-variable 'org-ellipsis "...") ;; folding symbol (customize-set-variable 'org-pretty-entities t) (customize-set-variable 'org-hide-emphasis-markers t) (customize-set-variable 'org-agenda-block-separator "") (customize-set-variable 'org-fontify-whole-heading-line t) (customize-set-variable 'org-fontify-done-headline t) (customize-set-variable 'org-fontify-quote-and-verse-blocks t) #+END_SRC *** - Set up fixed-pitch font: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces (fixed-pitch ((t (:family "Inconsolata" :height 180)))) #+END_SRC *** Associating faces with Org Mode elements Leave this to the ~customizations.el~ file, since they may change frequently. *** Turn on ~visual-line-mode~ and ~variable-pitch-mode~ by default: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks (org-mode . visual-line-mode) ; (org-mode . variable-pitch-mode) #+END_SRC *** \[zz\] Get rid of mode line indicators for the prior two modes: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config (eval-after-load 'face-remap '(diminish 'buffer-face-mode)) (eval-after-load 'simple '(diminish 'visual-line-mode)) #+END_SRC *** Consider using ~toc-org~, which puts a table of contents at the top of the Org file; this is described in \[zz\]'s init file. However, he/she says it breaks HTML export, so I'm not adding it here. *** Disguise =#+BEGIN_/#+END_= markers From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\] -- note that we can't hide =begin_src/end_src= pairs due to all the other crap that might be on the lines: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Try to get indentations right (again) when using variable pitch font, which are now (<2019-01-28 Mon>) not working correctly.  Found [[https://emacs.stackexchange.com/questions/26864/variable-pitch-face-breaking-indentation-in-org-mode][this]] from stuart-hickinbottom [sh] on StackExchange::1]]
(add-hook 'after-init-hook
    (lambda ()
     (require 'org-indent)       ; for org-indent face
     (set-face-attribute 'org-indent nil
         :inherit '(org-hide fixed-pitch))))
;; Try to get indentations right (again) when using variable pitch font, which are now (<2019-01-28 Mon>) not working correctly.  Found [[https://emacs.stackexchange.com/questions/26864/variable-pitch-face-breaking-indentation-in-org-mode][this]] from stuart-hickinbottom [sh] on StackExchange::1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (add-hook 'org-mode-hook '(lambda () (setq header-line-format " ") (setq left-margin-width 2) (setq right-margin-width 2) (set-window-buffer nil (current-buffer)))) #+END_SRC *** Some other stuff from \[lp\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-startup-indented t) (customize-set-variable 'org-ellipsis "...") ;; folding symbol (customize-set-variable 'org-pretty-entities t) (customize-set-variable 'org-hide-emphasis-markers t) (customize-set-variable 'org-agenda-block-separator "") (customize-set-variable 'org-fontify-whole-heading-line t) (customize-set-variable 'org-fontify-done-headline t) (customize-set-variable 'org-fontify-quote-and-verse-blocks t) #+END_SRC *** - Set up fixed-pitch font: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces (fixed-pitch ((t (:family "Inconsolata" :height 180)))) #+END_SRC *** Associating faces with Org Mode elements Leave this to the ~customizations.el~ file, since they may change frequently. *** Turn on ~visual-line-mode~ and ~variable-pitch-mode~ by default: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks (org-mode . visual-line-mode) ; (org-mode . variable-pitch-mode) #+END_SRC *** \[zz\] Get rid of mode line indicators for the prior two modes: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config (eval-after-load 'face-remap '(diminish 'buffer-face-mode)) (eval-after-load 'simple '(diminish 'visual-line-mode)) #+END_SRC *** Consider using ~toc-org~, which puts a table of contents at the top of the Org file; this is described in \[zz\]'s init file. However, he/she says it breaks HTML export, so I'm not adding it here. *** Disguise =#+BEGIN_/#+END_= markers From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\] -- note that we can't hide =begin_src/end_src= pairs due to all the other crap that might be on the lines: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Give us some nice-looking margins [lp]::1]]
   (add-hook 'org-mode-hook '(lambda ()
			       (setq header-line-format "  ")
			       (setq left-margin-width 2)
			       (setq right-margin-width 2)
			       (set-window-buffer nil (current-buffer))))
;; Give us some nice-looking margins [lp]::1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-startup-indented t) (customize-set-variable 'org-ellipsis "...") ;; folding symbol (customize-set-variable 'org-pretty-entities t) (customize-set-variable 'org-hide-emphasis-markers t) (customize-set-variable 'org-agenda-block-separator "") (customize-set-variable 'org-fontify-whole-heading-line t) (customize-set-variable 'org-fontify-done-headline t) (customize-set-variable 'org-fontify-quote-and-verse-blocks t) #+END_SRC *** - Set up fixed-pitch font: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces (fixed-pitch ((t (:family "Inconsolata" :height 180)))) #+END_SRC *** Associating faces with Org Mode elements Leave this to the ~customizations.el~ file, since they may change frequently. *** Turn on ~visual-line-mode~ and ~variable-pitch-mode~ by default: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks (org-mode . visual-line-mode) ; (org-mode . variable-pitch-mode) #+END_SRC *** \[zz\] Get rid of mode line indicators for the prior two modes: #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config (eval-after-load 'face-remap '(diminish 'buffer-face-mode)) (eval-after-load 'simple '(diminish 'visual-line-mode)) #+END_SRC *** Consider using ~toc-org~, which puts a table of contents at the top of the Org file; this is described in \[zz\]'s init file. However, he/she says it breaks HTML export, so I'm not adding it here. *** Disguise =#+BEGIN_/#+END_= markers From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\] -- note that we can't hide =begin_src/end_src= pairs due to all the other crap that might be on the lines: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Some other stuff from [lp]::1]]
(customize-set-variable 'org-startup-indented t)
(customize-set-variable 'org-ellipsis "...") ;; folding symbol
(customize-set-variable 'org-pretty-entities t)
(customize-set-variable 'org-hide-emphasis-markers t)
(customize-set-variable 'org-agenda-block-separator "")
(customize-set-variable 'org-fontify-whole-heading-line t)
(customize-set-variable 'org-fontify-done-headline t)
(customize-set-variable 'org-fontify-quote-and-verse-blocks t)
;; Some other stuff from [lp]::1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-prettify-symbols-mode -1) (defvar my-prettify-alist nil "Musa's personal prettifications.") (push '("<=" . ?‚â§) my-prettify-alist) (push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí (push '("#+end_example" . ?‚áê) my-prettify-alist) ;; ‚áê (push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) (push '("#+end_src" . ?‚áê) my-prettify-alist) (-let \[modify (lambda () (setq prettify-symbols-alist (append my-prettify-alist prettify-symbols-alist)))\] (add-hook 'text-mode-hook modify) (add-hook 'prog-mode-hook modify) ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs. ;; Or alter the particular hook directly. ) #+END_SRC *** Org-beautify This theme tends to make some of Org's features a little prettier, in particular the headlines. Load it over my existing theme to make it work. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Disguise =#+BEGIN_/#+END_= markers:1]]
(global-prettify-symbols-mode -1)

(defvar my-prettify-alist nil
  "Musa's personal prettifications.")

(push '("<=" . ?‚â§) my-prettify-alist)
(push '("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) my-prettify-alist) ;; ‚Ñ∞‚áí
(push '("#+end_example" . ?‚áê) my-prettify-alist)                  ;; ‚áê
(push '("#+begin_src" . (?ùîñ (Br . Bl) ?‚áí)) my-prettify-alist) 
(push '("#+end_src" . ?‚áê) my-prettify-alist)                  

(-let [modify (lambda ()
              (setq prettify-symbols-alist
                    (append my-prettify-alist prettify-symbols-alist)))]

  (add-hook 'text-mode-hook modify)
  (add-hook 'prog-mode-hook modify)
  ;; For org-example blocks, ‚ÄúC-c '‚Äù to see the prettifications of language constructs.
  ;; Or alter the particular hook directly.
)
;; Disguise =#+BEGIN_/#+END_= markers:1 ends here

;; [[file:org-setup.org::#+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package org-beautify-theme :after org ) (load-theme 'org-beautify t) #+end_src *** Pretty bullets #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Org-beautify:1]]
(use-package org-beautify-theme
  :after org
)

(load-theme 'org-beautify t)
;; Org-beautify:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-bullets-bullet-list '("‚óâ" "‚óã")) #+END_SRC *** Column setup for column view #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Pretty bullets:1]]
(customize-set-variable 'org-bullets-bullet-list 
    '("‚óâ" "‚óã"))
;; Pretty bullets:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (customize-set-variable 'org-columns-default-format "%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS") #+END_SRC ** Hiding property drawers Nothing is uglier than a nice Org Mode file with all its drawers showing. The function ~orc-cycle-hide-drawers~, from a user on \[\[https:/stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode\]\[Stack Overflow\]\], will hide the drawers completely, unlike just tabbing on the ~:properties~ line. (To unhide, you'd pretty much have to ~show-all~, I guess!) I've added two interactive functions for this, ~hide-properties~ and ~hide-all-properties~, that hide the properties of a headline or all the properties, respectively. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Column setup for column view:1]]
(customize-set-variable 'org-columns-default-format
			"%1PRIORITY %50ITEM %10CATEGORY %TODO %SCHEDULED %DEADLINE %TAGS")
;; Column setup for column view:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun hide-properties () (interactive) (org-cycle-hide-drawers 'children t)) (defun hide-all-properties () (interactive) (org-cycle-hide-drawers 'all t)) (defun show-properties () (interactive) (org-cycle-hide-drawers 'children nil)) (defun show-all-properties () (interactive) (org-cycle-hide-drawers 'all nil)) (defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt "Re-hide all drawers after a visibility state change." (when (and (derived-mode-p 'org-mode) (not (memq state '(overview folded contents)))) (save-excursion (let* ((globalp (memq state '(contents all))) (beg (if globalp (point-min) (point))) (end (if globalp (point-max) (if (eq state 'children) (save-excursion (outline-next-heading) (point)) (org-end-of-subtree t))))) (goto-char beg) (while (re-search-forward org-drawer-regexp end t) (save-excursion (beginning-of-line 1) (when (looking-at org-drawer-regexp) (let* ((start (1- (match-beginning 0))) (limit (save-excursion (outline-next-heading) (point))) (msg (format (concat "org-cycle-hide-drawers: " "`:END:`" " line missing at position %s") (1+ start)))) (if (re-search-forward "^\[ \t\]*:END:" limit t) ;; modified this to allow hiding or showing (rmt): (outline-flag-region start (point-at-eol) hide) (user-error msg)))))))))) #+END_SRC ** Link grabbing Use ~org-mac-link~ to grab stuff from Mac apps. ~org-mac-grab-link~ is the command to use; bind it to ~C-c g~: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Hiding property drawers:1]]
(defun hide-properties ()
  (interactive)
  (org-cycle-hide-drawers 'children t))
  
(defun hide-all-properties ()
  (interactive)
  (org-cycle-hide-drawers 'all t))

(defun show-properties ()
  (interactive)
  (org-cycle-hide-drawers 'children nil))
  
(defun show-all-properties ()
  (interactive)
  (org-cycle-hide-drawers 'all nil))

(defun org-cycle-hide-drawers (state &optional hide) ;; added "hide" -- rmt
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                      (point-min)
                    (point)))
             (end (if globalp
                      (point-max)
                    (if (eq state 'children)
			(save-excursion
                          (outline-next-heading)
                          (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                      (save-excursion
                        (outline-next-heading)
                        (point)))
                     (msg (format
                           (concat
                            "org-cycle-hide-drawers:  "
                            "`:END:`"
                            " line missing at position %s")
                           (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
		    ;; modified this to allow hiding or showing (rmt):
                    (outline-flag-region start (point-at-eol) hide)
                  (user-error msg))))))))))
;; Hiding property drawers:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-mac-link :ensure nil :after org :bind (:map org-mode-map ("C-c g" . org-mac-grab-link))) #+END_SRC ** Org buffer stuff - \[zz\] uses this to reformat a buffer; might as well include it -- his comments: #+BEGIN_QUOTE I picked up this little gem in the org mailing list. A function that reformats the current buffer by regenerating the text from its internal parsed representation. Quite amazing. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Link grabbing:1]]
  (use-package org-mac-link
    :ensure nil
    :after org
    :bind (:map org-mode-map
                ("C-c g" . org-mac-grab-link)))
;; Link grabbing:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun zz/org-reformat-buffer () (interactive) (when (y-or-n-p "Really format current buffer? ") (let ((document (org-element-interpret-data (org-element-parse-buffer)))) (erase-buffer) (insert document) (goto-char (point-min))))) #+END_SRC - Remove a link \[zz; from ** Exporters - Tufte output Let's try something different with ~use-package~, based on what I see \[zz\] doing: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Org buffer stuff:1]]
    (defun zz/org-reformat-buffer ()
      (interactive)
      (when (y-or-n-p "Really format current buffer? ")
        (let ((document (org-element-interpret-data (org-element-parse-buffer))))
          (erase-buffer)
          (insert document)
          (goto-char (point-min)))))
;; Org buffer stuff:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-pandoc :defer 5 :ensure t :after org) (load "ox-beamer") (use-package ox-tufte :defer 5 :ensure t :after org) #+END_SRC - Markdown: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Exporters:1]]
(use-package ox-pandoc
  :defer 5
  :ensure t
  :after org)
(load "ox-beamer")
(use-package ox-tufte
  :defer 5
  :ensure t
  :after org)
;; Exporters:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-md ;; :ensure nil ;; :defer 3 ;; :after org) #+END_SRC - LaTeX \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Exporters:2]]
  ;; (use-package ox-md
  ;;   :ensure nil
  ;;   :defer 3
  ;;   :after org)
;; Exporters:2 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-latex :ensure nil :demand :after org :custom (org-latex-compiler "pdflatex") :config ) #+END_SRC I've had trouble in the past with Org ignoring some of the loads I request, and then I have to reload the files manually. So I set up a function that I could call to do this, ~load-my-org-stuff~, if needed (and it's always needed. If there are Org problems, then I should move some of this stuff to a function that can be called again interactively; see file ~my-org-mode.el~ in the old startup directory ~emacs/Startup~. - Reveal.js Org Mode can output to a reveal.js deck, too. This sets that up. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Exporters:3]]
      (use-package ox-latex
        :ensure nil
        :demand
        :after org
        :custom
        (org-latex-compiler "pdflatex")
        :config
        )
;; Exporters:3 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package ox-reveal :ensure ox-reveal :demand :after org :custom (org-reveal-root "http:/localhost/reveal.js")) #+END_SRC ** Load extra Org mode files Some extra stuff for LaTeX output and to allow ignoring headlines with the ~:ignore:~ tag: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Exporters:4]]
      (use-package ox-reveal
        :ensure ox-reveal
        :demand
        :after org
        :custom
	(org-reveal-root "http://localhost/reveal.js"))
;; Exporters:4 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-extra") (ox-extras-activate '(latex-header-blocks ignore-headlines)) (load-library "ox-org") (use-package ox-pandoc) (load-library "ox-ehtml") (use-package org-mac-link) (use-package org-ref) (setq reftex-default-bibliography '("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" )) ;; see org-ref for use of these variables (setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org" org-ref-default-bibliography reftex-default-bibliography org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/") (load-library "ox-beamer") #+END_SRC ** Tufte setup Tufte style for books and other documents is a style patterned after the work of Edward Tufte. It is a really nice format that I've used in my /Foundations of Computer Science/ book. *** Load Tufte Org and LaTeX files #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Load extra Org mode files:1]]
(load-library "ox-extra")
(ox-extras-activate '(latex-header-blocks ignore-headlines))

(load-library "ox-org")
(use-package ox-pandoc)
(load-library "ox-ehtml")
(use-package  org-mac-link)
(use-package org-ref)
(setq reftex-default-bibliography 
      '("~/Library/texmf/bibtex/BibTeX/roy.bib"
	"~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib"
	"~/Library/texmf/bibtex/BibTeX/dai.bib"
	"~/Library/texmf/bibtex/BibTeX/not.bib"
	"~/Library/texmf/bibtex/BibTeX/auv.bib"
	"~/Library/texmf/bibtex/BibTeX/conman.bib"
	"~/Library/texmf/bibtex/BibTeX/context.bib"
	"~/Library/texmf/bibtex/BibTeX/aosn.bib"
	"~/Library/texmf/bibtex/BibTeX/mbio.bib"
	"~/Library/texmf/bibtex/BibTeX/trust.bib"
	))
;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Library/texmf/bibtex/BibTeX/notes.org"
      org-ref-default-bibliography reftex-default-bibliography
      org-ref-pdf-directory "~/Library/texmf/bibtex/BibTeX/bibtex-pdfs/")
(load-library "ox-beamer")
;; Load extra Org mode files:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "ox-tufte-latex") (use-package ox-tufte :demand t) #+END_SRC *** Add the Tufte format to output menu #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Load Tufte Org and LaTeX files:1]]
(load-library "ox-tufte-latex")
(use-package ox-tufte :demand t)
;; Load Tufte Org and LaTeX files:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (org-export-define-derived-backend 'tufte-html 'html :menu-entry '(?H "Export to Tufte-HTML" ((?T "To temporary buffer" (lambda (a s v b) (org-tufte-export-to-buffer a s v))) (?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v))) (?o "To file and open" (lambda (a s v b) (if a (org-tufte-export-to-file t s v) (org-open-file (org-tufte-export-to-file nil s v))))))) :translate-alist '((footnote-reference . org-tufte-footnote-reference) (src-block . org-tufte-src-block) (link . org-tufte-maybe-margin-note-link) (quote-block . org-tufte-quote-block) (verse-block . org-tufte-verse-block))) (org-export-define-derived-backend 'tufte-latex 'latex :menu-entry '(?T "Export to Tufte LaTeX" ((?T "As LaTeX buffer" (lambda (a s v b) (org-tufte-latex-export-as-latex a s v))) (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v))) (?l "As LaTeX file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-latex t s v) (org-open-file (org-tufte-latex-export-to-latex nil s v))))) (?P "As PDF file" org-tufte-latex-export-to-pdf) (?o "As PDF file and open" (lambda (a s v b) (if a (org-tufte-latex-export-to-pdf t s v b) (org-open-file (org-tufte-latex-export-to-pdf nil s v b))))))) :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference) (table . org-tufte-latex-table) (link . org-tufte-latex-link))) #+END_SRC ** Capturing information into Org Mode I use Alfred to control the Mac for most things. I found an org-capture workflow on the web, and this sets up the Emacs side of things by popping up a frame as if you'd typed ~^C c~ in Emacs. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Add the Tufte format to output menu:1]]
(org-export-define-derived-backend 'tufte-html 'html
  :menu-entry
  '(?H "Export to Tufte-HTML"
       ((?T "To temporary buffer"
	    (lambda (a s v b) (org-tufte-export-to-buffer a s v)))
	(?t "To file" (lambda (a s v b) (org-tufte-export-to-file a s v)))
	(?o "To file and open"
	    (lambda (a s v b)
	      (if a (org-tufte-export-to-file t s v)
		(org-open-file (org-tufte-export-to-file nil s v)))))))
  :translate-alist '((footnote-reference . org-tufte-footnote-reference)
		     (src-block . org-tufte-src-block)
		     (link . org-tufte-maybe-margin-note-link)
		     (quote-block . org-tufte-quote-block)
		     (verse-block . org-tufte-verse-block)))

(org-export-define-derived-backend 'tufte-latex 'latex
  :menu-entry
  '(?T "Export to Tufte LaTeX"
    ((?T "As LaTeX buffer"
      (lambda (a s v b) (org-tufte-latex-export-as-latex a s v)))
     (?t "As LaTeX file" (lambda (a s v b) (org-tufte-latex-export-to-latex a s v)))
     (?l "As LaTeX file and open"
      (lambda (a s v b)
        (if a (org-tufte-latex-export-to-latex t s v)
            (org-open-file (org-tufte-latex-export-to-latex nil s v)))))
     (?P "As PDF file" org-tufte-latex-export-to-pdf)
     (?o "As PDF file and open"
      (lambda (a s v b)
        (if a (org-tufte-latex-export-to-pdf t s v b)
            (org-open-file (org-tufte-latex-export-to-pdf nil s v b)))))))
  :translate-alist '((footnote-reference . org-tufte-latex-footnote-reference)
                     (table . org-tufte-latex-table)
                     (link . org-tufte-latex-link)))
;; Add the Tufte format to output menu:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "alfred-org-capture") #+END_SRC ** Global key bindings for Org #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Capturing information into Org Mode:1]]
(load-library "alfred-org-capture")
;; Capturing information into Org Mode:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (global-set-key "\C-cl" 'org-store-link) (global-set-key "\C-ca" 'org-agenda) (global-set-key "\C-cc" 'org-capture) (global-set-key "\C-cb" 'org-iswitchb) #+END_SRC ** Allow slides to be made from shell Define functions to allow the creation of slides and notes from Beamer Org Mode files from the shell. These functions can be called from the shell like this: : emacsclient -eval "(org-make-slides-file \"orgfilename-without-.org\")" and : emacsclient -eval "(org-make-notes-file \"orgfilename-without-.org\")" #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Global key bindings for Org:1]]
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
;; Global key bindings for Org:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun org-make-slides-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_CLASS_OPTIONS: \[t,presentation\]\n") (write-file "slides.org") (org-beamer-export-to-latex) (delete-frame frame t)) )) (defun org-make-notes-file (orgfile) (with-temp-buffer (let ((frame (make-frame '((minibuffer . nil))))) (find-and-get-rid-of-latex-class-options orgfile) (insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n") (write-file "notes.org") (org-latex-export-to-latex) (delete-frame frame t)) )) (defun find-and-get-rid-of-latex-class-options (orgfile) (find-file (concat orgfile ".org")) (save-buffer) (goto-char (point-min)) (when (search-forward "LATEX_CLASS_OPTIONS" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min)) (when (search-forward "beamerarticle" nil t) (beginning-of-line) (kill-line 1)) (goto-char (point-min))) #+END_SRC ** Set up Org projects #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Allow slides to be made from shell:1]]
(defun org-make-slides-file (orgfile)
  (with-temp-buffer
      (let ((frame (make-frame '((minibuffer . nil)))))
	(find-and-get-rid-of-latex-class-options orgfile)
	(insert "#+LATEX_CLASS_OPTIONS: [t,presentation]\n")
	(write-file "slides.org")
	(org-beamer-export-to-latex)
	(delete-frame frame t))
    ))
  

(defun org-make-notes-file (orgfile)
  (with-temp-buffer
      (let ((frame (make-frame '((minibuffer . nil)))))
	(find-and-get-rid-of-latex-class-options orgfile)
	(insert "#+LATEX_HEADER: \\usepackage{beamerarticle}\n")
	(write-file "notes.org")
	(org-latex-export-to-latex)
	(delete-frame frame t))
    ))


(defun find-and-get-rid-of-latex-class-options (orgfile)
  (find-file (concat orgfile ".org"))
  (save-buffer)
  (goto-char (point-min))
  (when (search-forward "LATEX_CLASS_OPTIONS" nil t)
    (beginning-of-line)
    (kill-line 1))
  (goto-char (point-min))
  (when (search-forward "beamerarticle" nil t)
    (beginning-of-line)
    (kill-line 1))
  (goto-char (point-min)))
;; Allow slides to be made from shell:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (setq org-publish-project-alist '( ;; My notes to myself, collected all in one place: ("notes" :base-directory "~/Notes" :base-extension "org" :publishing-function org-html-publish-to-html :publishing-directory "/Library/WebServer/Documents/Notes" :recursive t :section-numbers nil :with-author nil :with-creator nil :with-timestamps t :auto-sitemap t :sitemap-title "Site Map" :makeindex t :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">" ) ) ) #+END_SRC ** Fix stupid ox-xxx problem For some reason, neither ~use-package~ nor ~load-library~ are actually enabling ~ox-pandoc~ or the Tufte stuff, so they're left out of the output menu for Org. I suspect something (~ox-extras-activate~?) is clobbering the menu items they build. So until I figure out what is going on, I'm going to just load the things here manually. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Set up Org projects:1]]
(setq org-publish-project-alist
      '(
	;; My notes to myself, collected all in one place:
	("notes"
	 :base-directory "~/Notes"
	 :base-extension "org"
	 :publishing-function org-html-publish-to-html
	 :publishing-directory "/Library/WebServer/Documents/Notes"
	 :recursive t
	 :section-numbers nil
	 :with-author nil
	 :with-creator nil
	 :with-timestamps t
	 :auto-sitemap t
	 :sitemap-title "Site Map"
	 :makeindex t
	 :html-head "<link rel=\"stylesheet\" href=\"my-tufte.css\" type=\"test/css\">"
	 )
	)
      )
;; Set up Org projects:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun fix-org-mode () (interactive) (load-library "ox-pandoc") (load-library "ox-ehtml") (load-library "ox-tufte-latex") (load-library "ox-tufte")) ;(fix-org-mode) #+END_SRC ** Org-reveal for presentations I've never used this as of now (Oct 2018), but it looks really cool. From \[zz\]: #+BEGIN_QUOTE \[\[https:/github.com/yjwen/org-reveal\]\[org-reveal\]\] is an awesome package for building presentations with org-mode. The MELPA version of the package gives me a conflict with my hand-installed version of org-mode, so I also install it by hand and load it directly from its checked-out repository. #+END_QUOTE #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Fix stupid ox-xxx problem:1]]
(defun fix-org-mode ()
  (interactive)
  (load-library "ox-pandoc")
  (load-library "ox-ehtml")
  (load-library "ox-tufte-latex")
  (load-library "ox-tufte"))

;(fix-org-mode)
;; Fix stupid ox-xxx problem:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; (use-package ox-reveal ;; :load-path ("lisp/org-reveal") ;; :defer 3 ;; :after org ;; :custom ;; ; (org-reveal-note-key-char nil) ;; (org-reveal-root "http:/localhost/reveal.js")) ;; (use-package htmlize ;; :defer 3 ;; :after ox-reveal) #+end_src ** Agenda and GTD (OLD) Very long, very complicated, and somewhat screwed up---that's my agenda setup. I'll squirrel it away and resurrect it sometime, maybe: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Org-reveal for presentations:1]]
;;   (use-package ox-reveal
;;     :load-path ("lisp/org-reveal")
;;     :defer 3
;;     :after org
;;     :custom
;; ;    (org-reveal-note-key-char nil)
;;     (org-reveal-root "http://localhost/reveal.js"))
;;   (use-package htmlize
;;     :defer 3
;;     :after ox-reveal)
;; Org-reveal for presentations:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "org-agenda-setup") #+END_SRC ** Agenda setup ** Orgbox: Reschedule agenda items This changes the behavior of ~C-c C-s~ in the agenda to provide a selection of times to reschedule something to: later today (i.e., in 3 hours by default), this evening, etc. Pretty much what I am doing manually now. #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Agenda and GTD (OLD):1]]
(load-library "org-agenda-setup")
;; Agenda and GTD (OLD):1 ends here

;; [[file:org-setup.org::#+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package orgbox :after org ) #+end_src Downside: uses actual times, so they show up on the timeline. So I wrote some hacks to it: #+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Orgbox: Reschedule agenda items:1]]
(use-package orgbox
  :after org
  )
;; Orgbox: Reschedule agenda items:1 ends here

;; [[file:org-setup.org::#+begin_src emacs-lisp +n -i :tangle yes :comments link (require 'my-orgbox) #+end_src ** Calendar synchronization I use Apple's calendar, and I haven't found a good two-way sync for it. So instead, I use the functions defined here. The ~update-diary-from-calendars~ function should be called periodically, i.e., whenever the my calendars have changed. It copies calendar information into Emacs' ~diary~ file, which Org mode knows how to play nice with. The ~*imported-calendars*~ variable (so shoot me, I'm a Lisp programmer) contains a list of URLs for my calendars. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Orgbox: Reschedule agenda items:2]]
(require 'my-orgbox)
;; Orgbox: Reschedule agenda items:2 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defvar *imported-calendars* nil) (setq *imported-calendars* '( ("misc" . "https:/p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0") ("admin" . "https:/p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ") ("kathrina" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww") ("med" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q") ("research" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw") ("teaching" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g") ("Advising" . "https:/calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics") ("sanebox" . "https:/www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical") ; ("omni" . "https:/sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics") ("maine" . "https:/calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU") ; ("maine" . "https:/p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg") ("org-cal" . "https:/p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA") ) ) #+END_SRC This is the function that copies the calendars into the diary file, along with variables describing where the diary is and what dairy autosaves look like (so that the functions can nuke them). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Calendar synchronization:1]]
(defvar *imported-calendars* nil)
(setq *imported-calendars* 
      '(
	("misc" . "https://p65-calendars.icloud.com/published/2/oMuDK7km9FvrHLQifSkwyMHiKaL6fJsYd1n2Zo3RfFBtFpRV2Kjm7b3JvEw45Cuc5abPyNN3dy3rNdipTdQdsY8yD6fLUPb4nYRg9PQHqr0")
	("admin" . "https://p65-calendars.icloud.com/published/2/qjHeeSapmlsaPfGM2TQWjupyT4VaHsfFx6XyNnGuwcS4C-cN9G0CZYHF_ME6VsSSjKWebJOoca2R0T9OYDTStVUReUh37AqyLxQgPchVdTQ")
	("kathrina" . "https://p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO34FS7IfKXAcrVsm50anBxx5IL_pU6YZt7UdhZstmEcfxoIaJiVULE6hGPrNC9FBalPU0RUT7yWteaKoPGl811C1YqqIow0MyjGS64WKlN6ww")
	("med" . "https://p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO112wYFijYgooxz3ZFHK87B8PtG4RBq0CHznk755N26348CM9cbxLlqZyuWGrh4eCeJBK6md_4Z0SSS_ni2ts7CSM2JxOZz_ZMckdYp5_6U1Q")
	("research" . "https://p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO2lrwKV_sanlg_BhlbUewnGatIiEPtJgdXSlX_Esx9egY8aIr_XfYn3JqN367OZsbLuR0X7rfSrI5e6dJf5PSbIJlv2EuOTZvKlZoAYGXHJbw")
        ("teaching" . "https://p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO0jRX1yv517auBHYMNRqv-5HvcHIzZP1x3dF3EPfWz6ywRYmJ4qgyLcRUHPELXXSMg-OczVlW1XgUB32uKEjVSPYG_nwAJc0r4XbLmrbO_U9g")
	("Advising" . "https://calendar.google.com/calendar/ical/maine.edu_aoihoatd9irtf6s12q8g3smjhg%40group.calendar.google.com/public/basic.ics")
	("sanebox" . "https://www.sanebox.com/ical/325713/89622abd452b0b8042f3aa90b0105fca1b6e8824d94540f81c9ea0e207e04cb0/1a7279eab536b447bf50bf68b9ff66cb.ical")
;	("omni" . "https://sync.omnigroup.com/roymturner/OmniFocus-Reminders.ics")
	("maine" . "https://calendar.google.com/calendar/b/1?cid=cnR1cm5lckBtYWluZS5lZHU")
;	("maine" . "https://p65-calendars.icloud.com/published/2/AAAAAAAAAAAAAAAAAAAAAMo4YwMRB1rTEgCBVRP2BqvCLxNZSqTJ12e2xul6P7df-qUNTz6CiY0iaqDiX8X9NGcJWC8EMwNyHODu9YJQPhg")
	("org-cal" . "https://p65-calendars.icloud.com/published/2/MTA2NTg5OTYyMzEwNjU4OS6-0lf8BoSJAI899IW8IO15T1EzziFvaP9zY2sRUHtGVLXEiRUMbqtO6hSlSdMgzKokZEHuHl-smvTjHfxD9eA")
	)
      )
;; Calendar synchronization:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package icalendar) (defvar *diary-file* "~/.emacs.d/diary") (defvar *diary-file-autosave* "~/.emacs.d/#diary#") (defun update-diary-from-calendars () (interactive) (let (tempfile tempbuff) (save-excursion (save-selected-window (save-current-buffer (when (file-exists-p *diary-file*) (rename-file *diary-file* (concat *diary-file* ".prev") t) (when (get-file-buffer *diary-file*) (kill-buffer (get-file-buffer *diary-file*)))) (when (file-exists-p *diary-file-autosave*) (delete-file *diary-file-autosave*)) (sit-for 1) (dolist (url (mapcar #'cdr *imported-calendars*)) (setq tempfile (url-file-local-copy url)) (icalendar-import-file tempfile *diary-file*) (when (setq tempbuff (get-file-buffer tempfile)) (kill-buffer tempbuff)) (delete-file tempfile)) (when (setq tempbuff (get-file-buffer *diary-file*)) (kill-buffer tempbuff))))))) ;(update-diary-from-calendars) #+END_SRC ** Capture templates, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Calendar synchronization:2]]
(use-package icalendar)

(defvar *diary-file* "~/.emacs.d/diary")
(defvar *diary-file-autosave* "~/.emacs.d/#diary#")

(defun update-diary-from-calendars ()
  (interactive)
  (let (tempfile tempbuff)
    (save-excursion
      (save-selected-window
	(save-current-buffer
	  (when (file-exists-p *diary-file*)
	    (rename-file *diary-file* (concat *diary-file* ".prev") t)
	    (when (get-file-buffer *diary-file*)
	      (kill-buffer (get-file-buffer *diary-file*))))
	  (when (file-exists-p *diary-file-autosave*)
	    (delete-file *diary-file-autosave*))
	  (sit-for    1)
	  (dolist (url (mapcar #'cdr *imported-calendars*))
	    (setq tempfile (url-file-local-copy url))
	    (icalendar-import-file tempfile *diary-file*)
	    (when (setq tempbuff (get-file-buffer tempfile))
	      (kill-buffer tempbuff))
	    (delete-file tempfile))
	  (when (setq tempbuff (get-file-buffer *diary-file*))
	    (kill-buffer tempbuff)))))))

;(update-diary-from-calendars)
;; Calendar synchronization:2 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better: (require 'org-capture) (require 'org-capture-pop-frame) (customize-set-variable 'org-capture-templates '(("t" "To do \[inbox\]" entry (file+headline "~/org/AgendaFiles/inbox.org" "Tasks") "* TODO %i%?") ("n" "Quick note" entry (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("j" "Journal entry" entry (file+olp+datetree "~/Notes/Journals/journal.org" "Journal") "* %U %i%?" :jump-to-captured t :empty-lines-before 1) ("c" "Computer log entry" entry (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1)) ("d" "default" plain (function org-roam--capture-get-point) "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n" :unnarrowed t) )) #+END_SRC ** Babel *** Languages #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Capture templates, etc.:1]]
;; Set up org-capture to use a pop-up frame; hopefully, this will work with Alfred better:

(require 'org-capture)
(require 'org-capture-pop-frame)


(customize-set-variable
  'org-capture-templates
  '(("t" "To do [inbox]" entry
      (file+headline "~/org/AgendaFiles/inbox.org" "Tasks")
      "* TODO %i%?")
     ("n" "Quick note" entry
      (file+headline "~/org/AgendaFiles/incoming-notes.org" "Notes")
      "* %U %i%?" :jump-to-captured t :empty-lines-before 1)
     ("j" "Journal entry" entry
      (file+olp+datetree "~/Notes/Journals/journal.org" "Journal")
      "* %U %i%?" :jump-to-captured t :empty-lines-before 1)
     ("c" "Computer log entry" entry
      (file+olp+datetree "~/Notes/Logs/computer-log.org" "Computer log" "* %U%i %?" :jump-to-captured t :empty-lines-before 1))

     ("d" "default" plain (function org-roam--capture-get-point)
     "%?"
     :file-name "%<%Y%m%d%H%M%S>-${slug}"
     :head "#+title: ${title}\n"
     :unnarrowed t)

     ))
;; Capture templates, etc.:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-babel-load-languages ((emacs-lisp . t) (latex . t) (lisp . t) (dot . t) (perl . t) (python . t))) (org-babel-tangle-lang-exts (("ruby" . "rb") ("python" . "py") ("picolisp" . "l") ("ocaml" . "ml") ("maxima" . "max") ("lisp" . "lisp") ("latex" . "tex") ("emacs-lisp" . "el") ("elisp" . "el"))))) #+END_SRC ** Show off-screen heading From \[\[\[https:/alhassy.github.io/init/\]\[afcl\]\]\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Languages:1]]
(my/custom-set-variables '((org-babel-load-languages
			    ((emacs-lisp . t)
			     (latex . t)
			     (lisp . t)
			     (dot . t)
			     (perl . t)
			     (python . t)))
			   (org-babel-tangle-lang-exts
			    (("ruby" . "rb")
			     ("python" . "py")
			     ("picolisp" . "l")
			     ("ocaml" . "ml")
			     ("maxima" . "max")
			     ("lisp" . "lisp")
			     ("latex" . "tex")
			     ("emacs-lisp" . "el")
			     ("elisp" . "el")))))
;; Languages:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-sticky-header :config (setq-default org-sticky-header-full-path 'full ;; Child and parent headings are seperated by a /. org-sticky-header-outline-path-separator " / ") ) #+END_SRC ** SQL Needed for org-roam #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Show off-screen heading:1]]
 (use-package org-sticky-header
  :config
  (setq-default
   org-sticky-header-full-path 'full
   ;; Child and parent headings are seperated by a /.
   org-sticky-header-outline-path-separator " / ")
)
;; Show off-screen heading:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package emacsql :demand) (use-package emacsql-sqlite :after emacsql :demand) #+END_SRC ** Org-roam From \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][SQL:1]]
(use-package emacsql
  :demand)
(use-package emacsql-sqlite
  :after emacsql
  :demand)
;; SQL:1 ends here

;; [[file:org-setup.org::#+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-roam :demand :after (org emacsql emacsql-sqlite) ;; :load-path "lisp/org-roam" :bind ("C-c n l" . org-roam) ("C-c n t" . org-roam-dailies-today) ("C-c n f" . org-roam-find-file) ("C-c n i" . org-roam-insert) ("C-c n g" . org-][Org-roam:1]]
(use-package org-roam
  :demand
  :after (org emacsql emacsql-sqlite)
  ;;   :load-path "lisp/org-roam"
  :bind
  ("C-c n l" . org-roam)
  ("C-c n t" . org-roam-dailies-today)
  ("C-c n f" . org-roam-find-file)
  ("C-c n i" . org-roam-insert)
  ("C-c n g" . org-roam-graph)
  :diminish
  :hook
  ((org-mode . org-roam-mode)
   (after-init . org-roam-db-build-cache))
  :custom
  (org-roam-directory "~/Notes/org-roam")
 )
;; Org-roam:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway][Activate org-protocol...or try to, anway:1]]
(require 'org-roam-protocol)
;; Activate org-protocol...or try to, anway:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual.][Deft (browsing and filtering):1]]
(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-directory org-directory)
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  (deft-file-naming-rules '((noslash . "-")
                            (nospace . "-")
                            (case-fn . downcase)))
  (deft-org-mode-title-prefix t)
  (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg"))
  (deft-default-extension "org"))
;; Deft (browsing and filtering):1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use:][Completion:1]]
(use-package company)

(use-package company-org-roam
;  :straight (:host github :repo "org-roam/company-org-roam")
  :config
  (push 'company-org-roam company-backends))
;; Completion:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal=][=Org-journal=:1]]
(use-package org-journal
  :bind
  ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  ;; Was: (org-journal-file-format "%Y-%m-%d")
  (org-journal-dir "/home/rmt/Notes/org-roam/")
  (org-journal-date-format "%A, %d %B %Y"))
;; =Org-journal=:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]:][=Org-download=:1]]
(use-package org-download
  :after org
  :defer nil
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "images")
  (org-image-actual-width '(300))
  :config
  (require 'org-download))
;; =Org-download=:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots][Mathpix: convert picture of math to \LaTeX{} code:1]]
(load-library "mathpix")
(my/custom-set-variables
 '((mathpix-app-id "app-id")
   (mathpix-app-key "app-key")))

(global-set-key (kbd "C-x m") 'mathpix-screenshot)

;; Should use this, but only after getting "straight" to work:
;(use-package mathpix.el
;  :straight (:host github :repo "jethrokuan/mathpix.el")
;  :Custom ((mathpix-app-id "app-id")
;           (mathpix-app-key "app-key"))
;  :bind
;  ("C-x m" . mathpix-screenshot))
;; Mathpix: convert picture of math to \LaTeX{} code:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\]][Backward compatibility -- 'cause I was dumb:1]]
(defun my-export-delete-headlines-tagged-noheading (backend)
  (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline)
                                         'headline
                                         'identity)))
    (when (member "noheading" (org-element-property :tags hl))
      (goto-char (org-element-property :begin hl))
      (delete-region (point) (progn (forward-line) (point))))))

(setq org-export-before-processing-hook
  'my-export-delete-headlines-tagged-noheading)
;; Backward compatibility -- 'cause I was dumb:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file.]["Preview" source blocks:1]]
(load-library "handle-preview-block")
;; "Preview" source blocks:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc.][Miscellaneous Org modules, bindings, etc.:1]]
(unless (member 'org-mouse org-modules)
  (add-to-list 'org-modules 'org-mouse t))

(unless (member 'org-protocol org-modules)
  (add-to-list 'org-modules 'org-protocol t))

(unless (member 'org-panel org-modules)
  (add-to-list 'org-modules 'org-panel t))

(unless (member 'org-toc org-modules)
  (add-to-list 'org-modules 'org-toc t))
;; Miscellaneous Org modules, bindings, etc.:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it.][Miscellaneous Org modules, bindings, etc.:2]]
(with-eval-after-load 'org
     (bind-key "C-c k" 'org-cut-subtree org-mode-map)
     (setq org-yank-adjusted-subtrees t))
;; Miscellaneous Org modules, bindings, etc.:2 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (with-eval-after-load 'org (bind-key "C-c k" 'org-cut-subtree org-mode-map) (setq org-yank-adjusted-subtrees t)) #+END_SRC ** Calendar mode for Org, other things][Calendar mode for Org, other things:1]]
(use-package calfw)
(require 'calfw-org)
;; Calendar mode for Org, other things:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (with-eval-after-load 'org (bind-key "C-c k" 'org-cut-subtree org-mode-map) (setq org-yank-adjusted-subtrees t)) #+END_SRC ** Calendar mode for Org, other things #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package calfw) (require 'calfw-org) #+end_src ** Special blocks Good idea, but doesn't seem to work on my setup; may monkey around with it sometime. (6 Jul 2020).][Special blocks:1]]
;;(use-package org-special-block-extras
;;  :ensure t
;;  :hook (org-mode . org-special-block-extras-mode))
;; Special blocks:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (with-eval-after-load 'org (bind-key "C-c k" 'org-cut-subtree org-mode-map) (setq org-yank-adjusted-subtrees t)) #+END_SRC ** Calendar mode for Org, other things #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package calfw) (require 'calfw-org) #+end_src ** Special blocks Good idea, but doesn't seem to work on my setup; may monkey around with it sometime. (6 Jul 2020). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;;(use-package org-special-block-extras ;; :ensure t ;; :hook (org-mode . org-special-block-extras-mode)) #+END_SRC ** Poporg: orgified comments for source code][Poporg: orgified comments for source code:1]]
;;* This package allows you to edit comments in Org Mode
;;** We'll see if it works; I doubt /italics/ or *bold* will work.
;;- Will lists?  Who
;;  - Knows?
;;  - But: :: Maybe!
;;

(use-package poporg
      :bind (("C-c /" . poporg-dwim)))
;; Poporg: orgified comments for source code:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (with-eval-after-load 'org (bind-key "C-c k" 'org-cut-subtree org-mode-map) (setq org-yank-adjusted-subtrees t)) #+END_SRC ** Calendar mode for Org, other things #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package calfw) (require 'calfw-org) #+end_src ** Special blocks Good idea, but doesn't seem to work on my setup; may monkey around with it sometime. (6 Jul 2020). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;;(use-package org-special-block-extras ;; :ensure t ;; :hook (org-mode . org-special-block-extras-mode)) #+END_SRC ** Poporg: orgified comments for source code #+begin_src emacs-lisp +n -i :tangle yes :comments link ;;* This package allows you to edit comments in Org Mode ;;** We'll see if it works; I doubt /italics/ or *bold* will work. ;;- Will lists? Who ;; - Knows? ;; - But: :: Maybe! ;; (use-package poporg :bind (("C-c /" . poporg-dwim))) #+end_src ** Miscellaneous Org Mode settings][Miscellaneous Org Mode settings:1]]
(my/custom-set-variables
 '((org-datetree-add-timestamp inactive)
   (org-default-notes-file "~/org/inbox.org")
   (org-doing-file "~/what-am-I-doing.org")
   (org-ellipsis "...")
   (org-emphasis-alist
    (("*" bold)
     ("/" outline-6)
     ("_" underline)
     ("=" calendar-today verbatim)
     ("~" org-code verbatim)
     ("+"
      (:strike-through t))))
   (org-enforce-todo-dependencies t)
   (org-export-allow-bind-keywords t)
   (org-export-backends (ascii beamer html icalendar latex man md odt org))
   (org-export-with-smart-quotes t)
   (org-fontify-done-headline t)
   (org-fontify-quote-and-verse-blocks t)
   (org-fontify-whole-heading-line t)
   (org-format-latex-options
    (:foreground default :background default :scale 1.3 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
		 ("begin" "$1" "$" "$$" "\\(" "\\[")))
   (org-hide-emphasis-markers t)
   (org-hide-leading-stars t)
   (org-highest-priority 49)
   (org-highlight-latex-and-related (latex entities))
   (org-image-actual-width nil)
   (org-latex-classes
    (("beamer" "\\documentclass[presentation]{beamer}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
     ("article" "\\documentclass[11pt]{article}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("letter" "\\documentclass[11pt,letterpaper]{letter}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
     ("report" "\\documentclass[11pt]{report}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
     ("book-no-parts-or-numbers" "\\documentclass[11pt]{book}"
      ("\\chapter*{%s}" . "\\chapter*{%s}")
      ("\\section*{%s}" . "\\section*{%s}")
      ("\\subsection*{%s}" . "\\subsection*{%s}")
      ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph*{%s}" . "\\paragraph*{%s}"))
     ("book-no-parts" "\\documentclass[11pt]{book}"
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s|")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}"))
     ("book" "\\documentclass[11pt]{book}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
     ("tufte-handout-ignore-top-level" "\\documentclass{tufte-handout}"
      ("\\nop{%s}" . "\\nop*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}"))
     ("tufte-handout" "\\documentclass{tufte-handout}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}"))
     ("tufte-book" "\\documentclass{tufte-book}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}"))
     ("llncs" "\\documentclass{llncs}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
   (org-latex-compiler "xelatex")
   (org-latex-default-packages-alist
    (("AUTO" "inputenc" t
      ("pdflatex"))
     ("T1" "fontenc" t
      ("pdflatex"))
     ("" "graphicx" t nil)
     ("" "grffile" t nil)
     ("" "longtable" nil nil)
     ("" "wrapfig" nil nil)
     ("" "rotating" nil nil)
     ("normalem" "ulem" t nil)
     ("" "amsmath" t nil)
     ("" "textcomp" t nil)
     ("" "amssymb" t nil)
     ("" "capt-of" nil nil)
     ("hidelinks" "hyperref" nil nil)))
   (org-latex-pdf-process
    ("xelatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f"))
   (org-list-allow-alphabetical t)
   (org-log-done t)
   (org-lowest-priority 67)
   (org-modules
    (org-bbdb org-bibtex org-docview org-gnus org-info org-mhe org-rmail org-w3m org-annotate-file org-bullets org-checklist org-mac-iCal org-mac-link org-panel))
   (org-pretty-entities t)
   (org-pretty-tags-surrogate-strings
    (("veryimportant" . "‚òÜ‚òÜ‚òÜ")
     ("important" . "‚òÜ‚òÜ")
     ("lessimportant" . "‚òÜ")
     ("money" . "$$$")))
   (org-ref-default-bibliography
    ("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" "~/Library/texmf/bibtex/BibTeX/nsf19.bib"))
   (org-ref-insert-cite-function org-ref-insert-cite-link)
   (org-refile-targets ((org-agenda-files :maxlevel . 3)))
   (org-reveal-mathjax nil)
   (org-reveal-note-key-char "nil")
   (org-reveal-root "http://localhost/reveal.js" nil nil "Customized with use-package ox-reveal")
   (org-reveal-theme "mod-white")
   (org-reveal-transition "none")
   (org-src-fontify-natively t)
   (org-src-lang-modes
    (("browser" . html)
     ("translate" . text)
     ("ocaml" . tuareg)
     ("elisp" . emacs-lisp)
     ("ditaa" . artist)
     ("asymptote" . asy)
     ("dot" . fundamental)
     ("sqlite" . sql)
     ("calc" . fundamental)
     ("C" . c)
     ("cpp" . c++)
     ("C++" . c++)
     ("screen" . shell-script)
     ("shell" . sh)
     ("bash" . sh)
     ("preview" . latex)))
   (org-src-preserve-indentation t)
   (org-src-tab-acts-natively t nil nil "Customized with use-package org")
   (org-startup-indented t)
   (org-structure-template-alist
    (("n" . "NOTES")
     ("P" . "SRC preview :exports results :results output silent :image \"your-filename.pdf\"
?n#+END_SRC

#+NAME foobar
#+CAPTION: Your caption here
#+ATTR_LATEX: :float margin
[[./your-filename.pdf]]")
     ("E" . "src emacs-lisp +n -i :tangle yes :comments link")
     ("p" . "src python +n -i :tangle yes :comments link
")
     ("l" . "src lisp +n -i :tangle yes :comments link")
     ("L" . "export latex
")
     ("s" . "src
")
     ("e" . "example
")
     ("q" . "quote
")
     ("v" . "verse
")
     ("V" . "verbatim
")
     ("c" . "center
")
     ("h" . "export
")
     ("H" . "html
")
     ("a" . "ascii
")))
   '(org-tag-alist
     (("atbat" . 98)
      ("ondeck" . 111)
      (:startgroup)
      ("beforework")
      ("morning" . 109)
      ("lunchtime" . 76)
      ("afternoon" . 97)
      ("afterwork")
      ("evening" . 101)
      ("today" . 116)
      ("tomorrow" . 62)
      ("thisweek")
      ("weekend")
      ("nextweek")
      ("soon" . 115)
      ("thissemester")
      ("spring")
      ("summer")
      ("fall")
      ("later" . 108)
      (:endgroup)
      (:startgroup)
      ("harddeadline" . 68)
      ("softdeadline" . 100)
      ("optionaldeadline" . 79)
      (:endgroup)
      (:startgroup)
      ("mustdo" . 77)
      ("shoulddo" . 83)
      ("wouldliketodo" . 87)
      (:endgroup)
      ("sometime")
      ("anytime")
      ("urgent" . 117)
      ("important" . 105)
      ("@work" . 119)
      ("@home" . 104)
      ("@shopping")
      ("@grocery" . 103)))
   (org-todo-keyword-faces
    (("AREA" . "darkblue")
     ("PROJECT" . "darkred")
     ("TASKLIST" . "darkred")
     ("TODO" . "darkred")
     ("NEXT" . "red")
     ("InProgress" . "green")
     ("Waiting" . "orange")
     ("Inactive" . "black")
     ("Stalled" . "purple")
     ("Done" . "gray")
     ("Abandoned"
      (:foreground "gray" :background "black"))))
   (org-todo-keywords
    ((sequence "TODO(t)" "ONDECK(o)" "ATBAT(a)" "INPROGRESS(i@/!)" "WAITING(w@/!)" "ONHOLD(@/!)" "|" "DONE(d!)" "CANCELLED(c!)")
     (sequence "HABIT(h)" "|" "DONE")
     (sequence "PROJECT(p)"  "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)")
     (sequence "TASKLIST(T)" "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)")
     (sequence  "AREA(a)" "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)")
     (sequence "TOWRITE" "DRAFTING(@/!)" "REVISING(@/!)" "ONHOLD(@/!)" "TOSUBMIT" "SUBMITTED(@/!)" "|" "PUBLISHED(@/!)" "REJECTED(@/!)")))
   (org-tufte-include-footnotes-at-bottom t)
   (org-use-speed-commands
    (lambda nil
      (and
       (looking-at org-outline-regexp)
       (looking-back "^**"))))
   (outline-minor-mode-prefix "M-#")
   (outline-regexp "^[ 
]*[*]+" t))
 )
;; Miscellaneous Org Mode settings:1 ends here

;; [[file:org-setup.org::roam-graph) :diminish :hook ((org-mode . org-roam-mode) (after-init . org-roam-db-build-cache)) :custom (org-roam-directory "~/Notes/org-roam") ) #+END_SRC ** Activate org-protocol...or try to, anway #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (require 'org-roam-protocol) #+END_SRC ** Deft (browsing and filtering) This is useful for org-roam; setup here is from \[zz\], not the manual. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package deft :after org :bind ("C-c n d" . deft) :custom (deft-directory org-directory) (deft-recursive t) (deft-use-filename-as-title nil) (deft-use-filter-string-for-filename t) (deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))) (deft-org-mode-title-prefix t) (deft-extensions '("org" "txt" "text" "md" "markdown" "org.gpg")) (deft-default-extension "org")) #+END_SRC ** Completion The author of =org-roam= suggests =company= for completion; don't know if that's in addition to or is replaced by =helm=, which I use: #+BEGIN_SRC emacs-lisp :tangle yes :comments link (use-package company) (use-package company-org-roam ; :straight (:host github :repo "org-roam/company-org-roam") :config (push 'company-org-roam company-backends)) #+END_SRC ** =Org-journal= #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-journal :bind ("C-c n j" . org-journal-new-entry) :custom (org-journal-date-prefix "#+TITLE: ") (org-journal-file-format "%Y-%m-%d.org") ;; Was: (org-journal-file-format "%Y-%m-%d") (org-journal-dir "/home/rmt/Notes/org-roam/") (org-journal-date-format "%A, %d %B %Y")) #+END_SRC ** =Org-download= Configured after \[zz\]: #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (use-package org-download :after org :defer nil :custom (org-download-method 'directory) (org-download-image-dir "images") (org-image-actual-width '(300)) :config (require 'org-download)) #+END_SRC ** Mathpix: convert picture of math to \LaTeX{} code I'm guessing I'm going to have to do something w/ "app-id" and "app-key" here\dots #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "mathpix") (my/custom-set-variables '((mathpix-app-id "app-id") (mathpix-app-key "app-key"))) (global-set-key (kbd "C-x m") 'mathpix-screenshot) ;; Should use this, but only after getting "straight" to work: ;(use-package mathpix.el ; :straight (:host github :repo "jethrokuan/mathpix.el") ; :Custom ((mathpix-app-id "app-id") ; (mathpix-app-key "app-key")) ; :bind ; ("C-x m" . mathpix-screenshot)) #+END_SRC *** TODO Think about adding =org-noter=, an =interleave= replacement. *** TODO Think about adding =org-roam-bibtex= -- it's in alpha at the moment, though! *** TODO Think about adding =org-fc=, a spaced-repetition learning package. ** Some extras *** Backward compatibility -- 'cause I was dumb For backward compatibility for some documents, allow skipping headline that have the tag ~:noheading:~; I used this before discovering the ~:ignore:~ thing:\[fn:1\] #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (defun my-export-delete-headlines-tagged-noheading (backend) (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline) 'headline 'identity))) (when (member "noheading" (org-element-property :tags hl)) (goto-char (org-element-property :begin hl)) (delete-region (point) (progn (forward-line) (point)))))) (setq org-export-before-processing-hook 'my-export-delete-headlines-tagged-noheading) #+END_SRC *** "Preview" source blocks Load a file that defines a new source block type, ~preview~. This will take the block, which is expected to be LaTeX, add appropriate headers and footers, including ~\begin{preview}/\end{preview}~, and then run LaTeX on the result using Perl as a scripting language. The output is a PDF file whose name is specified by an ~:image~ argument to the block. This allows the use of LaTeX for figures, since the generated file can be treated as a normal image file. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (load-library "handle-preview-block") #+END_SRC A template for using this looks like this: : #+BEGIN_SRC preview :exports results :results output silent :image "foobar.pdf" : <latex code here> : #+END_SRC : : #+NAME: fig:constructs:blocks : #+CAPTION: Block constructs in different languages. : #+ATTR_LATEX: :float margin : \[\[./foobar.pdf\]\] *** Miscellaneous Org modules, bindings, etc. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (unless (member 'org-mouse org-modules) (add-to-list 'org-modules 'org-mouse t)) (unless (member 'org-protocol org-modules) (add-to-list 'org-modules 'org-protocol t)) (unless (member 'org-panel org-modules) (add-to-list 'org-modules 'org-panel t)) (unless (member 'org-toc org-modules) (add-to-list 'org-modules 'org-toc t)) #+END_SRC From \[\[\[http:/sachachua.com\]\[sc\]\]\] -- cutting a subtree and pasting it. #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link (with-eval-after-load 'org (bind-key "C-c k" 'org-cut-subtree org-mode-map) (setq org-yank-adjusted-subtrees t)) #+END_SRC ** Calendar mode for Org, other things #+begin_src emacs-lisp +n -i :tangle yes :comments link (use-package calfw) (require 'calfw-org) #+end_src ** Special blocks Good idea, but doesn't seem to work on my setup; may monkey around with it sometime. (6 Jul 2020). #+BEGIN_SRC emacs-lisp +n -i :tangle yes :comments link ;;(use-package org-special-block-extras ;; :ensure t ;; :hook (org-mode . org-special-block-extras-mode)) #+END_SRC ** Poporg: orgified comments for source code #+begin_src emacs-lisp +n -i :tangle yes :comments link ;;* This package allows you to edit comments in Org Mode ;;** We'll see if it works; I doubt /italics/ or *bold* will work. ;;- Will lists? Who ;; - Knows? ;; - But: :: Maybe! ;; (use-package poporg :bind (("C-c /" . poporg-dwim))) #+end_src ** Miscellaneous Org Mode settings #+begin_src emacs-lisp +n -i :tangle yes :comments link (my/custom-set-variables '((org-datetree-add-timestamp inactive) (org-default-notes-file "~/org/inbox.org") (org-doing-file "~/what-am-I-doing.org") (org-ellipsis "...") (org-emphasis-alist (("*" bold) ("/" outline-6) ("_" underline) ("=" calendar-today verbatim) ("~" org-code verbatim) ("+" (:strike-through t)))) (org-enforce-todo-dependencies t) (org-export-allow-bind-keywords t) (org-export-backends (ascii beamer html icalendar latex man md odt org)) (org-export-with-smart-quotes t) (org-fontify-done-headline t) (org-fontify-quote-and-verse-blocks t) (org-fontify-whole-heading-line t) (org-format-latex-options (:foreground default :background default :scale 1.3 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\\\\["))) (org-hide-emphasis-markers t) (org-hide-leading-stars t) (org-highest-priority 49) (org-highlight-latex-and-related (latex entities)) (org-image-actual-width nil) (org-latex-classes (("beamer" "\\documentclass\[presentation\]{beamer}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("article" "\\documentclass\[11pt\]{article}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("letter" "\\documentclass\[11pt,letterpaper\]{letter}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass\[11pt\]{report}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book-no-parts-or-numbers" "\\documentclass\[11pt\]{book}" ("\\chapter*{%s}" . "\\chapter*{%s}") ("\\section*{%s}" . "\\section*{%s}") ("\\subsection*{%s}" . "\\subsection*{%s}") ("\\subsubsection*{%s}" . "\\subsubsection*{%s}") ("\\paragraph*{%s}" . "\\paragraph*{%s}")) ("book-no-parts" "\\documentclass\[11pt\]{book}" ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s|") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}")) ("book" "\\documentclass\[11pt\]{book}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("tufte-handout-ignore-top-level" "\\documentclass{tufte-handout}" ("\\nop{%s}" . "\\nop*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")) ("tufte-handout" "\\documentclass{tufte-handout}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")) ("tufte-book" "\\documentclass{tufte-book}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}")) ("llncs" "\\documentclass{llncs}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}")))) (org-latex-compiler "xelatex") (org-latex-default-packages-alist (("AUTO" "inputenc" t ("pdflatex")) ("T1" "fontenc" t ("pdflatex")) ("" "graphicx" t nil) ("" "grffile" t nil) ("" "longtable" nil nil) ("" "wrapfig" nil nil) ("" "rotating" nil nil) ("normalem" "ulem" t nil) ("" "amsmath" t nil) ("" "textcomp" t nil) ("" "amssymb" t nil) ("" "capt-of" nil nil) ("hidelinks" "hyperref" nil nil))) (org-latex-pdf-process ("xelatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f")) (org-list-allow-alphabetical t) (org-log-done t) (org-lowest-priority 67) (org-modules (org-bbdb org-bibtex org-docview org-gnus org-info org-mhe org-rmail org-w3m org-annotate-file org-bullets org-checklist org-mac-iCal org-mac-link org-panel)) (org-pretty-entities t) (org-pretty-tags-surrogate-strings (("veryimportant" . "‚òÜ‚òÜ‚òÜ") ("important" . "‚òÜ‚òÜ") ("lessimportant" . "‚òÜ") ("money" . "$$$"))) (org-ref-default-bibliography ("~/Library/texmf/bibtex/BibTeX/roy.bib" "~/Library/texmf/bibtex/BibTeX/rmt-pubs.bib" "~/Library/texmf/bibtex/BibTeX/dai.bib" "~/Library/texmf/bibtex/BibTeX/not.bib" "~/Library/texmf/bibtex/BibTeX/auv.bib" "~/Library/texmf/bibtex/BibTeX/conman.bib" "~/Library/texmf/bibtex/BibTeX/context.bib" "~/Library/texmf/bibtex/BibTeX/aosn.bib" "~/Library/texmf/bibtex/BibTeX/mbio.bib" "~/Library/texmf/bibtex/BibTeX/trust.bib" "~/Library/texmf/bibtex/BibTeX/nsf19.bib")) (org-ref-insert-cite-function org-ref-insert-cite-link) (org-refile-targets ((org-agenda-files :maxlevel . 3))) (org-reveal-mathjax nil) (org-reveal-note-key-char "nil") (org-reveal-root "http:/localhost/reveal.js" nil nil "Customized with use-package ox-reveal") (org-reveal-theme "mod-white") (org-reveal-transition "none") (org-src-fontify-natively t) (org-src-lang-modes (("browser" . html) ("translate" . text) ("ocaml" . tuareg) ("elisp" . emacs-lisp) ("ditaa" . artist) ("asymptote" . asy) ("dot" . fundamental) ("sqlite" . sql) ("calc" . fundamental) ("C" . c) ("cpp" . c++) ("C++" . c++) ("screen" . shell-script) ("shell" . sh) ("bash" . sh) ("preview" . latex))) (org-src-preserve-indentation t) (org-src-tab-acts-natively t nil nil "Customized with use-package org") (org-startup-indented t) (org-structure-template-alist (("n" . "NOTES") ("P" . "SRC preview :exports results :results output silent :image \"your-filename.pdf\" ?n#+END_SRC ,#+NAME foobar ,#+CAPTION: Your caption here ,#+ATTR_LATEX: :float margin \[\[./your-filename.pdf\]\]") ("E" . "src emacs-lisp +n -i :tangle yes :comments link") ("p" . "src python +n -i :tangle yes :comments link ") ("l" . "src lisp +n -i :tangle yes :comments link") ("L" . "export latex ") ("s" . "src ") ("e" . "example ") ("q" . "quote ") ("v" . "verse ") ("V" . "verbatim ") ("c" . "center ") ("h" . "export ") ("H" . "html ") ("a" . "ascii "))) '(org-tag-alist (("atbat" . 98) ("ondeck" . 111) (:startgroup) ("beforework") ("morning" . 109) ("lunchtime" . 76) ("afternoon" . 97) ("afterwork") ("evening" . 101) ("today" . 116) ("tomorrow" . 62) ("thisweek") ("weekend") ("nextweek") ("soon" . 115) ("thissemester") ("spring") ("summer") ("fall") ("later" . 108) (:endgroup) (:startgroup) ("harddeadline" . 68) ("softdeadline" . 100) ("optionaldeadline" . 79) (:endgroup) (:startgroup) ("mustdo" . 77) ("shoulddo" . 83) ("wouldliketodo" . 87) (:endgroup) ("sometime") ("anytime") ("urgent" . 117) ("important" . 105) ("@work" . 119) ("@home" . 104) ("@shopping") ("@grocery" . 103))) (org-todo-keyword-faces (("AREA" . "darkblue") ("PROJECT" . "darkred") ("TASKLIST" . "darkred") ("TODO" . "darkred") ("NEXT" . "red") ("InProgress" . "green") ("Waiting" . "orange") ("Inactive" . "black") ("Stalled" . "purple") ("Done" . "gray") ("Abandoned" (:foreground "gray" :background "black")))) (org-todo-keywords ((sequence "TODO(t)" "ONDECK(o)" "ATBAT(a)" "INPROGRESS(i@/!)" "WAITING(w@/!)" "ONHOLD(@/!)" "|" "DONE(d!)" "CANCELLED(c!)") (sequence "HABIT(h)" "|" "DONE") (sequence "PROJECT(p)" "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)") (sequence "TASKLIST(T)" "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)") (sequence "AREA(a)" "WAITING(w@/!" "|" "DONE(d!)" "CANCELLED(c!)") (sequence "TOWRITE" "DRAFTING(@/!)" "REVISING(@/!)" "ONHOLD(@/!)" "TOSUBMIT" "SUBMITTED(@/!)" "|" "PUBLISHED(@/!)" "REJECTED(@/!)"))) (org-tufte-include-footnotes-at-bottom t) (org-use-speed-commands (lambda nil (and (looking-at org-outline-regexp) (looking-back "^**")))) (outline-minor-mode-prefix "M-#") (outline-regexp "^\[ \]*\[* \]+" t)) ) #+end_src][Miscellaneous Org Mode settings:2]]
;; Make Org the default major mode instead of text: 
(customize-set-variable 'default-major-mode 'org-mode)
;; Miscellaneous Org Mode settings:2 ends here
